{
  "version": 3,
  "sources": ["../../../worker.js"],
  "sourceRoot": "/Users/mike/elderella/website/.wrangler/tmp/deploy-7EYods",
  "sourcesContent": ["export default {\n  async fetch(request, env, ctx) {\n    // Get origin from request\n    const origin = request.headers.get('Origin');\n    const allowedOrigins = ['https://elderella.com', 'https://elderella.github.io', 'http://localhost:8000'];\n    const corsOrigin = allowedOrigins.includes(origin) ? origin : allowedOrigins[0];\n    \n    // Handle CORS\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        headers: {\n          'Access-Control-Allow-Origin': corsOrigin,\n          'Access-Control-Allow-Methods': 'POST, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type',\n        }\n      });\n    }\n\n    const url = new URL(request.url);\n    \n    // Handle interview form submission\n    if (url.pathname === '/api/interview' && request.method === 'POST') {\n      try {\n        const data = await request.json();\n        \n        // Validate required fields\n        if (!data.name || !data.email) {\n          return new Response(JSON.stringify({ \n            error: 'Name and email are required fields' \n          }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': corsOrigin\n            }\n          });\n        }\n        \n        // Validate email format\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(data.email)) {\n          return new Response(JSON.stringify({ \n            error: 'Please provide a valid email address' \n          }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': corsOrigin\n            }\n          });\n        }\n        \n        // Sanitize inputs (basic XSS prevention)\n        const sanitize = (str) => str ? String(str).trim().slice(0, 500) : '';\n        const sanitizedData = {\n          name: sanitize(data.name),\n          email: sanitize(data.email).toLowerCase(),\n          phone: sanitize(data.phone),\n          situation: sanitize(data.situation)\n        };\n        \n        // Intelligent name parsing\n        const nameParts = sanitizedData.name.trim().split(/\\s+/); // Split on any whitespace\n        let firstName = '';\n        let lastName = '';\n        \n        if (nameParts.length === 1) {\n          // Single name - treat as first name\n          firstName = nameParts[0];\n          lastName = '';\n        } else if (nameParts.length === 2) {\n          // Two parts - simple first and last\n          firstName = nameParts[0];\n          lastName = nameParts[1];\n        } else {\n          // Three or more parts - everything except last is first name\n          // This handles \"Mary Jane Smith\" as firstName: \"Mary Jane\", lastName: \"Smith\"\n          lastName = nameParts[nameParts.length - 1];\n          firstName = nameParts.slice(0, -1).join(' ');\n        }\n        \n        // Assert (create or update) contact in Attio - using email as matching attribute\n        const attioResponse = await fetch('https://api.attio.com/v2/objects/people/records?matching_attribute=email_addresses', {\n          method: 'PUT',\n          headers: {\n            'Authorization': `Bearer ${env.ATTIO_API_KEY}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            data: {\n              values: {\n                name: [{ \n                  first_name: firstName,\n                  last_name: lastName,\n                  full_name: sanitizedData.name\n                }],\n                email_addresses: [{ email_address: sanitizedData.email }],\n                // Only include phone if it looks valid (skip for now to avoid validation errors)\n                // phone_numbers: sanitizedData.phone ? [{ original_phone_number: sanitizedData.phone }] : [],\n                // Caregiving Situation attribute\n                'ec1acf24-4dcc-4ec4-8b0c-5dd24411a52e': sanitizedData.situation ? [{ value: sanitizedData.situation }] : []\n              }\n            }\n          })\n        });\n\n        if (!attioResponse.ok) {\n          const errorText = await attioResponse.text();\n          console.error('Attio API error:', errorText);\n          throw new Error('Failed to save to Attio');\n        }\n\n        const person = await attioResponse.json();\n        \n        // Add to User Interviews list\n        const listResponse = await fetch('https://api.attio.com/v2/lists/5612c985-ac73-40bf-a8be-28723dc019f8/entries', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${env.ATTIO_API_KEY}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            data: {\n              parent_object: 'people',\n              parent_record_id: person.data.id\n            }\n          })\n        });\n\n        if (!listResponse.ok) {\n          const errorText = await listResponse.text();\n          console.error('Failed to add to list:', errorText);\n        }\n\n        return new Response(JSON.stringify({ success: true }), {\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': corsOrigin\n          }\n        });\n      } catch (error) {\n        console.error('Error in interview handler:', error);\n        return new Response(JSON.stringify({ error: error.message }), {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': corsOrigin\n          }\n        });\n      }\n    }\n\n    // Handle newsletter signup\n    if (url.pathname === '/api/newsletter' && request.method === 'POST') {\n      try {\n        const data = await request.json();\n        \n        // Validate email\n        if (!data.email) {\n          return new Response(JSON.stringify({ \n            error: 'Email is required' \n          }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': corsOrigin\n            }\n          });\n        }\n        \n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        if (!emailRegex.test(data.email)) {\n          return new Response(JSON.stringify({ \n            error: 'Please provide a valid email address' \n          }), {\n            status: 400,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': corsOrigin\n            }\n          });\n        }\n        \n        const sanitizedEmail = data.email.trim().toLowerCase();\n        \n        const attioResponse = await fetch('https://api.attio.com/v2/objects/people/records?matching_attribute=email_addresses', {\n          method: 'PUT',\n          headers: {\n            'Authorization': `Bearer ${env.ATTIO_API_KEY}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            data: {\n              values: {\n                email_addresses: [{ email_address: sanitizedEmail }]\n              }\n            }\n          })\n        });\n\n        if (!attioResponse.ok) {\n          const errorText = await attioResponse.text();\n          console.error('Attio API error:', errorText);\n          throw new Error('Failed to save to Attio');\n        }\n\n        return new Response(JSON.stringify({ success: true }), {\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': corsOrigin\n          }\n        });\n      } catch (error) {\n        console.error('Error in newsletter handler:', error);\n        return new Response(JSON.stringify({ error: error.message }), {\n          status: 500,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': corsOrigin\n          }\n        });\n      }\n    }\n\n    return new Response('Not Found', { status: 404 });\n  }\n};"],
  "mappings": "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",
  "names": []
}
